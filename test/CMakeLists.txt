cmake_minimum_required(VERSION 3.10)

project(test_paddlelite_opencl)

if (WIN64)
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /bigobj /MTd")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /bigobj /MTd")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /bigobj /MT")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /bigobj /MT")
    include_directories(${CMAKE_CURRENT_SOURCE_DIR})
    link_directories(${CMAKE_CURRENT_SOURCE_DIR})
else()
    find_package(OpenCV REQUIRED)
    message(STATUS "OpenCV library status:")
    message(STATUS "    version: ${OpenCV_VERSION}")
    message(STATUS "    libraries: ${OpenCV_LIBS}")
    message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")
    find_package(OpenMP REQUIRED)
    if (OPENMP_FOUND)
        message("OPENMP FOUND")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    endif()
endif()

if (WIN64)
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../build.lite.x86.opencl/inference_lite_lib/cxx/include)
    link_directories(${CMAKE_CURRENT_SOURCE_DIR}/../build.lite.x86.opencl/inference_lite_lib/cxx/lib)
    link_directories(${CMAKE_CURRENT_SOURCE_DIR}/../build.lite.x86.opencl/third_party/mklml/src/extern_mklml/lib)
else()
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../build.lite.linux.x86.gcc.opencl/inference_lite_lib/cxx/include)
    link_directories(${CMAKE_CURRENT_SOURCE_DIR}/../build.lite.linux.x86.gcc.opencl/inference_lite_lib/cxx/lib)
    link_directories(${CMAKE_CURRENT_SOURCE_DIR}/../build.lite.linux.x86.gcc.opencl/third_party/mklml/src/extern_mklml/lib)
endif()

add_executable(test_paddlelite_opencl test_paddlelite_opencl.cpp)
if (WIN64)
    target_link_libraries(test_paddlelite_opencl libiomp5md.lib libpaddle_api_light_bundled.lib opencv_world455.lib)
else()
    target_link_libraries(test_paddlelite_opencl paddle_api_light_bundled ${OpenCV_LIBS} dl mkl_core mkl_intel_thread mkl_intel_lp64 iomp5 pthread)
    add_executable(test_redis test_redis.cpp)
    target_link_libraries(test_redis hiredis)
endif()
